#!/usr/bin/env node

/**
 * Farert WebAssembly Unit Tests - Command Line Runner
 * Node.jsÁí∞Â¢É„Åß„É¶„Éã„ÉÉ„Éà„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 */

const fs = require('fs');
const path = require('path');

// WebAssemblyÁí∞Â¢É„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÔºàNode.jsÁî®Ôºâ
global.TextEncoder = require('util').TextEncoder;
global.TextDecoder = require('util').TextDecoder;

// „ÉÜ„Çπ„Éà„É©„É≥„Éä„Éº„ÅÆ„Ç§„É≥„Éù„Éº„Éà
const { FarertTestRunner, defineTests } = require('./unit_tests.js');

async function runTests() {
    console.log('üöÄ Farert WebAssembly Unit Tests (Node.js)');
    console.log('==========================================\n');

    // WebAssembly„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    const wasmPath = path.join(__dirname, '..', 'dist', 'farert.wasm');
    const jsPath = path.join(__dirname, '..', 'dist', 'farert.js');
    
    if (!fs.existsSync(wasmPath)) {
        console.error('‚ùå WebAssembly„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', wasmPath);
        console.error('   ÂÖà„Å´„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí„Éì„É´„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ: make build');
        process.exit(1);
    }
    
    if (!fs.existsSync(jsPath)) {
        console.error('‚ùå JavaScript„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', jsPath);
        console.error('   ÂÖà„Å´„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí„Éì„É´„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ: make build');
        process.exit(1);
    }

    try {
        // „ÉÜ„Çπ„Éà„É©„É≥„Éä„Éº„ÇíÂàùÊúüÂåñ
        const testRunner = new FarertTestRunner();
        
        // Node.jsÁî®„ÅÆWebAssembly„É≠„Éº„ÉÄ„Éº„ÇíË®≠ÂÆö
        testRunner.initialize = async function() {
            try {
                // Node.jsÁí∞Â¢É„Åß„ÅÆWebAssemblyË™≠„ÅøËæº„Åø
                const moduleExports = require(jsPath);
                const moduleFactory = moduleExports.default || moduleExports;
                
                if (typeof moduleFactory !== 'function') {
                    throw new Error('Module factory is not a function. Check Emscripten build settings.');
                }
                
                this.module = await moduleFactory();
                this.isReady = true;
                console.log('‚úÖ Farert WebAssembly module loaded successfully\n');
                return true;
            } catch (error) {
                console.error('‚ùå Failed to load WebAssembly module:', error.message);
                console.error('   This might be due to Emscripten ES6 module format.');
                console.error('   Try running browser tests instead: npm run test:browser');
                return false;
            }
        };

        // „É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñ
        const initialized = await testRunner.initialize();
        if (!initialized) {
            console.error('‚ùå WebAssembly„É¢„Ç∏„É•„Éº„É´„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            process.exit(1);
        }

        // „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÇíÂÆöÁæ©
        defineTests(testRunner);

        // „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÂá¶ÁêÜ
        const args = process.argv.slice(2);
        let results;

        if (args.length > 0) {
            const category = args[0];
            console.log(`üîç Running tests in category: ${category}\n`);
            results = await testRunner.runTestsByCategory(category);
        } else {
            console.log('üß™ Running all unit tests...\n');
            results = await testRunner.runAllTests();
        }

        // ÁµêÊûú„ÅÆÂá∫Âäõ
        console.log('\n' + '='.repeat(50));
        console.log('üìä Final Test Results:');
        console.log('='.repeat(50));
        
        const passRate = results.total > 0 ? 
            (results.passed / results.total * 100).toFixed(1) : 0;
        
        console.log(`Total Tests:    ${results.total}`);
        console.log(`‚úÖ Passed:      ${results.passed}`);
        console.log(`‚ùå Failed:      ${results.failed}`);
        console.log(`‚è≠Ô∏è  Skipped:     ${results.skipped}`);
        console.log(`üìà Pass Rate:   ${passRate}%`);

        if (results.errors.length > 0) {
            console.log('\n‚ùå Failed Test Details:');
            results.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error.test}`);
                console.log(`   Error: ${error.error}\n`);
            });
        }

        // ÊàêÂäü„ÉªÂ§±Êïó„Å´Âøú„Åò„ÅüÁµÇ‰∫Ü„Ç≥„Éº„Éâ
        if (results.failed > 0) {
            console.log('‚ùå Some tests failed');
            process.exit(1);
        } else {
            console.log('‚úÖ All tests passed!');
            process.exit(0);
        }

    } catch (error) {
        console.error('‚ùå Test execution failed:', error.message);
        console.error(error.stack);
        process.exit(1);
    }
}

// ‰ΩøÁî®ÊñπÊ≥ï„ÅÆË°®Á§∫
function showUsage() {
    console.log('Usage: node run_tests.js [category]');
    console.log('');
    console.log('Categories:');
    console.log('  basic         - Basic functionality tests');
    console.log('  database      - Database management tests');
    console.log('  search        - Station/line search tests');
    console.log('  route         - Route management tests');
    console.log('  fare          - Fare calculation tests');
    console.log('  debug         - Debug and utility tests');
    console.log('  error-handling - Error handling tests');
    console.log('  memory        - Memory management tests');
    console.log('  integration   - Integration tests');
    console.log('');
    console.log('Examples:');
    console.log('  node run_tests.js           # Run all tests');
    console.log('  node run_tests.js database  # Run only database tests');
    console.log('  node run_tests.js fare      # Run only fare calculation tests');
}

// „Éò„É´„Éó„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÂá¶ÁêÜ
if (process.argv.includes('--help') || process.argv.includes('-h')) {
    showUsage();
    process.exit(0);
}

// „É°„Ç§„É≥ÂÆüË°å
if (require.main === module) {
    runTests().catch(error => {
        console.error('‚ùå Unexpected error:', error);
        process.exit(1);
    });
}